var container, stats;
var camera, controls, scene, renderer, model, raycaster, mouse;
var loader, intersects,modelchildren = [];
var datapoints = [{"name":"Rotors","position":{"x":0.05,"y":0.05,"z":0.1},"camerapos":{"x": -0.028, "y":0.176, "z": 0.255},"camerarot":{"x": -0.603, "y": -0.091, "z": -0.062}},{"name":"solarcells","position":{"x":0,"y":0.1,"z":0},"camerapos":{"x": -0.126, "y": 0.286, "z": 0.184},"camerarot":{"x": -0.999, "y": -0.355, "z": -0.496}},{"name":"communicator","position":{"x":-0.04,"y":0,"z":0},"camerapos":{"x": -0.225, "y": 0.008, "z": -0.116},"camerarot":{"x": -3.068, "y": -1.094, "z": -3.076}},{"name":"insulation","position":{"x":-0.04,"y":-0.04,"z":0},"camerapos":{"x": -0.250, "y": 0.037, "z": 0.008},"camerarot":{"x": -1.345, "y": -1.417, "z": -1.343}},{"name":"othersensors","position":{"x":-0.005,"y":-0.04,"z":-0.05},"camerapos":{"x": 0.025, "y": -0.035, "z": -0.249},"camerarot":{"x": 2.999, "y": 0.102, "z": -3.126}},{"name":"legs","position":{"x":0.05,"y":-0.04,"z":0.08},"camerapos":{"x": 0.022, "y": -0.045, "z": 0.276},"camerarot":{"x": 0.164, "y": 0.079, "z": -0.013}},{"name":"camera","position":{"x":0.03,"y":0,"z":0},"camerapos":{"x": 0.217, "y": 0.067, "z": 0.021},"camerarot":{"x": -1.268, "y": 1.257, "z": 1.254}}]

var instrumentdata = {
    "Rotors": {"subname":"Flies on Mars", "desc":"Rotors are designed for low Reynolds number flows in the thin Martian Atmosphere. The rotor tip velocities stay comfortably subsonic"},
    "solarcells": {"subname":"Operates daily", "desc":"Energy from solar cells is used to recharge the battery"},
    "communicator": {"subname":"Commands & data", "desc":"Communicates to the rover electra ultra-high frequency(UHF) radio. A radiometric beacon signal allows the Heli to stay away from the Rover"},
    "insulation": {"subname":"Survives the night", "desc":"Aerogel insulation and a heater keeps the batteries warm overnight"},
    "othersensors": {"subname":"Autonomous Mobility", "desc":"A camera and other sensors together with a fault-tolerant computer provides a high level of autonomy"},
    "legs": {"subname":"Lands on terrain", "desc":"Lightweight flexible legs, active vision, and an altimeter for safe landing on terrain"},
    "camera": {"subname":"Images wide areas", "desc":"A High-resolution camera is used to take images at a variety of locations and altitudes within 0.6km of the rover"}}


init();
// animate();

function init() {

    var scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,0.1,1000)
        // camera.position.x = -3.38;
        // camera.position.y = 3;
        // camera.position.z = 2.30;
        camera.position.set(-0.24, 0.14, 0.44)
        // camera.rotation.set(-0.65, -0.82, -0.51)
        
        
    renderer = new THREE.WebGLRenderer({antialias: true, alpha:true});
    renderer.setSize(window.innerWidth,window.innerHeight);

    // set render auto clear false.
    renderer.autoClear = false;

    // initialize global configuration
    THREE.threeDataConfig = {renderer: renderer, camera: camera};


    document.body.appendChild(renderer.domElement);

    // var axesHelper = new THREE.AxesHelper( 5 );
    // scene.add( axesHelper );

    // var size = 5;
    // var divisions = 10;

    // var gridHelper = new THREE.GridHelper( size, divisions );
    // scene.add( gridHelper );

    // Load the 3D model
    loader = new THREE.GLTFLoader();
    loader.load('copter.gltf', function(gltf){
        model = gltf.scene
        model.position.set(0, -0.1, 0)
        model.scale.set(0.4, 0.4, 0.4)
        model.rotation.set(0, -30, 0)
        scene.add(model);
    });



    var Hotspot = function ( hotpoint_data ) {
        "use strict";
    
        var self = this;
    
        self.callback = function(_this, sprite, action){};
    
        self.data = hotpoint_data;
    
        self.sprite = null;
    
        self.group = new THREE.Group();
    
        self.entities = { };
    
        self.makeVisible = function( b ){ self.entities.red_dot_transparent.visible = !b; };
    
        // --------------------------------
        // radius : 0.04, widthSegments : 32, heightSegments : 32, phiStart : 0, phiLength : 2 * Math.PI, thetaStart : 0, thetaLength : Math.PI
        var hotspot_geometry = new THREE.SphereGeometry( 
            0.015, 32, 32, 0, 2 * Math.PI, 0,  Math.PI
        );

        var hot_spot = self.entities.hot_spot =  new THREE.Mesh( hotspot_geometry, new THREE.MeshBasicMaterial( {  color: 0xff0000  } ) );
        
        hot_spot.position.set( self.data.position.x, self.data.position.y, self.data.position.z );
    
        hot_spot.callback = function( action ) { self.callback(self, hot_spot, action); };

        hot_spot.name = self.data.name;
        
            console.log(hot_spot.name)
        var hot_spot_transparent = self.entities.hot_spot_transparent = new THREE.Mesh( hotspot_geometry, new THREE.MeshBasicMaterial( {  color: 0xff0000, transparent: true, opacity: 0.3 } ) );
        hot_spot_transparent.scale.set( 1.5, 1.5, 1.5 );
        hot_spot_transparent.position.set( self.data.position.x, self.data.position.y, self.data.position.z );
        hot_spot_transparent.visible = true
        hot_spot_transparent.raycast = function(){};

        self.group.add(hot_spot);
        self.group.add(hot_spot_transparent);
    
        return this;
    };

    var hotpoints = datapoints

    var hotpoints_objects_array = [];
    
    hotpoints.forEach( function(currentValue, index, array) {
        // console.log("hotpoints", currentValue)
        var hot_spot = new Hotspot( currentValue, index, array  );

        scene.add( hot_spot.group );

        hotpoints_objects_array.push(hot_spot);

        hot_spot.callback = function(_this, sprite, action){

            var e;
            if (action === "click"){
                e = document.createEvent('Event');
                e.initEvent("hotspot-clicked", true, true);
                e.hotpoint =_this;
                document.dispatchEvent(e);
            }
            else if (action === "hover"){
                e = document.createEvent('Event');
                e.initEvent("hotspot-hover", true, true);
                e.hotpoint =_this;
                document.dispatchEvent(e);
            }
            else if (action === "focus"){
                e = document.createEvent('Event');
                e.initEvent("hotspot-clicked", true, true);
                e.hotpoint =_this;
                document.dispatchEvent(e);
            } 
            else if (action === "out"){
                e = document.createEvent('Event');
                e.initEvent("hotspot-out", true, true);
                e.hotpoint =_this;
                document.dispatchEvent(e);
            }
            else if (action === "blur"){
                e = document.createEvent('Event');
                e.initEvent("hotspot-clicked", true, true);
                e.hotpoint =_this;
                document.dispatchEvent(e);
            }
        };
    });


    var hot_point_name = document.createElement('span');
        hot_point_name.innerHTML = "";
        hot_point_name.style.position = "absolute";
        hot_point_name.style.display = "none";
        hot_point_name.style.color = "#000";
        hot_point_name.style.fontFamily  = "Lato, sans-serif";
        hot_point_name.style.fontSize  = "20px";
        hot_point_name.style.fontWeight  = "400";
        hot_point_name.style.backgroundColor = "rgba(255,255,255,.75)";
        hot_point_name.style.padding = "6px 16px";
        
        hot_point_name.hotpoint = null;

        document.body.appendChild(hot_point_name);

        document.addEventListener("hotspot-hover", function(e){

            // console.log("hotpointhover", e);
            // var selectedHotspot = e.hotpoint.entities.hot_spot_transparent
            // selectedHotspot.visible = true
            // if ($('#main-column-container').hasClass('out'))
            //     return;

            // hot_point_name.hotpoint = e.hotpoint;
            // hot_point_name.style.display = "";

            // setHotPointNamePosition( e.hotpoint );
        });

        document.addEventListener("hotspot-out", function(e){

            console.log("hotpointout", e);
            // var selectedHotspot = e.hotpoint.entities.hot_spot_transparent
            // selectedHotspot.visible = false
            // let drawer = state.drawer;
            // let camera = drawer.getCamera();
            // let ipm = state.inputmanager;
            // let canvas = drawer.getRenderer().domElement;

            // let hotpoint = e.hotpoint;

            // let entity = hotpoint.entities.red_dot_transparent;

            // hot_point_name.style.display = "none";
            // hot_point_name.hotpoint = null;
        });

        document.addEventListener("hotspot-clicked", function(e){
            console.log("Trigger camera animation", e.hotpoint)
            controls.enabled = false;
            var hotpoint_pos = e.hotpoint.data.camerapos
            var hotpoint_rot = e.hotpoint.data.camerarot

            // controls.maxPolarAngle = Math.PI/2; 
            // controls.minPolarAngle=0;

            gsap.to( camera.position, {
                duration: 1,
                x: hotpoint_pos.x,
                y: hotpoint_pos.y,
                z: hotpoint_pos.z,
                onUpdate: () => {
                    controls.enabled = false;
                },
                onComplete: () => {
                    controls.enabled = true;
                    
                }
            } );
            
            gsap.to( camera.rotation, {
                duration: 1,
                x: hotpoint_rot.x,
                y: hotpoint_rot.y,
                z: hotpoint_rot.z,
                onUpdate: () => {
                    controls.enabled = false;
                },
                onComplete: () => {
                    controls.enabled = true;
                    
                    
                }
            } );
            
        });
    

    // console.log(scene)

    // raycaster = new THREE.Raycaster();
    // mouse = new THREE.Vector2();

    //add a light
    function addLight(source, xpos, ypos, zpos) {
        var light = source;
        light.position.x = xpos;
        light.position.y = ypos;
        light.position.z = zpos;
        scene.add(light);
    }




    // using reusable function addLight(source, xpos, ypos, zpos) 
    addLight(new THREE.DirectionalLight(0xFFFFFF, 1, 500), -4.471, 0.429, -4.438);
    addLight(new THREE.DirectionalLight(0xFFFFFF, 1, 500), -3.500, 1.068, 3.811);
    addLight(new THREE.DirectionalLight(0xFFFFFF, 1, 500), 3.706, 0.840, 4.274);
    addLight(new THREE.DirectionalLight(0xFFFFFF, 1, 500), -3.500, 1.068, 3.811);
    addLight(new THREE.DirectionalLight(0xFFFFFF, 1, 500), 0.118, 1.109, 0.101);
    addLight(new THREE.DirectionalLight(0xFFFFFF, 1, 500), 2.903, 0.728, -4.200);
    addLight(new THREE.DirectionalLight(0xFFFFFF, 1, 500), -0.041, -2.139, -0.091);
    addLight(new THREE.AmbientLight(0xFFFFFF, 4, 500), 0.092, 0.529, -0.633);
    addLight(new THREE.AmbientLight(0xFFFFFF, 4, 500), 0.092, 0.529, -0.633);
    var controls = new THREE.OrbitControls(camera);
    controls.enableDamping = true;
    // controls.maxPolarAngle = Math.PI/2;
    // controls.minDistance = 2;
    // controls.maxDistance = 6;
    
    if ($(window).width() < 756) {
        controls.enableZoom = false;
     }
     else {
        controls.enableZoom = true;
     }

    function zoomModel(isZoomOut, scale) {
        if(isZoomOut){
            controls.dollyIn(scale);
        }else{
            controls.dollyOut(scale);
        }
      }

    function onZoomIn() {
        // alert("test")
        controls.zoomIn();
    
    }
    function onZoomOut() {
        // alert("test")
        controls.zoomOut();
    
    }

    var zoomIn = document.getElementById( 'zoom-in' );
	var zoomOut = document.getElementById( 'zoom-out' );
		
    zoomIn.addEventListener( 'click', onZoomIn, false );
    zoomOut.addEventListener( 'click', onZoomOut, false );

    var render = function(){

        requestAnimationFrame(render);
        renderer.render(scene, camera)

    }
    
    render()

    var pickPointObject = null;
    
    function onMouseMove( event ) {

        var raycaster = new THREE.Raycaster();
        var mouse = new THREE.Vector2();

        // event.preventDefault();

        var rect = renderer.domElement.getBoundingClientRect();

        var clientX = event.clientX - rect.left;
        var clientY = event.clientY - rect.top;

        if ( clientX < 0 || event.clientX > ( renderer.domElement.clientWidth + rect.left ) )
            return;

        if ( clientY < 0 || event.clientY > ( renderer.domElement.clientHeight - rect.top ) )
            return;

        mouse.x = ( clientX / renderer.domElement.clientWidth ) * 2 - 1;
        mouse.y = - ( clientY / renderer.domElement.clientHeight ) * 2 + 1;

        raycaster.setFromCamera( mouse, camera );

        var intersects = raycaster.intersectObjects( scene.children, true );
        

        roverparts = ["Rotors"]

        if ( intersects.length > 0 ) {
            // console.log("intersects", event)
            
            
            if (roverparts.indexOf(intersects[0].object.name) >= 0) {

                intersects[0].object.callback( "hover" );   

            }else{
            //    console.log("Other elements", intersects[0].object)
            }

            

        }else{
            // console.log("No elements touched")
        }
    }
    
    
    function onClick( event ) {

        var raycaster = new THREE.Raycaster();
        var mouse = new THREE.Vector2();

        var rect = renderer.domElement.getBoundingClientRect();

        var clientX = event.clientX - rect.left;
        var clientY = event.clientY - rect.top;

        if ( clientX < 0 || event.clientX > ( renderer.domElement.clientWidth + rect.left ) )
            return;

        if ( clientY < 0 || event.clientY > ( renderer.domElement.clientHeight - rect.top ) )
            return;

        mouse.x = ( clientX / renderer.domElement.clientWidth ) * 2 - 1;
        mouse.y = - ( clientY / renderer.domElement.clientHeight ) * 2 + 1;

        raycaster.setFromCamera( mouse, camera );

        var intersects = raycaster.intersectObjects( scene.children, true ); 

        roverparts = ["Rotors", "solarcells", "communicator", "insulation", "othersensors", "legs", "camera"]

        function global_area_clicked(){
            var e=document.createEvent('Event');
            e.initEvent("app-global-area-clicked", true, true);
            e.event = event;
            document.dispatchEvent(e);
        }

   
            $('.warningicon3d').fadeOut( "slow" );

        

        if ( intersects.length > 0 ) {

            // console.log(intersects[0].object)
            
            if (roverparts.indexOf(intersects[0].object.name) >= 0) {
                console.log("test")
                console.log("intersects", intersects[0].object.name)
                var selectobj = intersects[0].object.name
                document.getElementById("Objectname").innerHTML = "<h3>"+selectobj+"</h3>"
                document.getElementById("Objectname").innerHTML += "<p>"+instrumentdata[selectobj]['subname']+"</p>"
                document.getElementById("Objectname").innerHTML += "<p>"+instrumentdata[selectobj]['desc']+"</p>"
                $('.model3dbox').css('display', 'block');
                $('.model3dbox').addClass('animate__fadeInLeft');
                $('.model3dbox').removeClass('animate__fadeOutLeft');
                intersects[0].object.callback( "click" );
            }else {
                global_area_clicked();
            }


        } else {
            global_area_clicked();
        }

        
    }



    window.addEventListener( 'mousemove', onMouseMove, false );
    window.addEventListener( 'click', onClick, false );

    
    
    $('.close3dmodel').on("click", function(){
        $('.model3dbox').removeClass('animate__fadeInLeft');
        $('.model3dbox').addClass('animate__fadeOutLeft');
        controls.enabled = false;
        gsap.to( camera.position, {
            duration: 1,
            x: -0.24,
            y: 0.14,
            z: 0.44,
            onUpdate: () => {
                controls.enabled = false;
            },
            onComplete: () => {
                controls.enabled = true;
                
            }
        } );
        
        gsap.to( camera.rotation, {
            duration: 1,
            x: -0.30,
            y: -0.47,
            z: -0.14,
            onUpdate: () => {
                controls.enabled = false;
            },
            onComplete: () => {
                controls.enabled = true;
                
            }
        } );
        
    })
    $('#resetCam').on("click", function(){
        controls.enabled = false;
        gsap.to( camera.position, {
            duration: 1,
            x: -0.24,
            y: 0.14,
            z: 0.44,
            onUpdate: () => {
                controls.enabled = false;
            },
            onComplete: () => {
                controls.enabled = true;
                
            }
        } );
        
        gsap.to( camera.rotation, {
            duration: 1,
            x: -0.30,
            y: -0.47,
            z: -0.14,
            onUpdate: () => {
                controls.enabled = false;
            },
            onComplete: () => {
                controls.enabled = true;
                
            }
        } );
        
    })
    
 


} //init()






document.addEventListener('touchmove', function (event) {
    if (event.scale !== 1) { event.preventDefault(); }
  }, { passive: false });
        

window.addEventListener('resize', () => {
    renderer.setSize(window.innerWidth,window.innerHeight);
    camera.aspect = window.innerWidth / window.innerHeight;

    // camera.updateProjectionMatrix();
})